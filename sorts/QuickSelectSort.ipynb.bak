{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#a = [5,2,8,3,7,1,4]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Start in partation ===\n",
      "i =  0\n",
      "i =  1\n",
      "i =  2\n",
      "i =  3\n",
      "a =  [5, 4, 1, 3, 7, 8, 9]\n",
      "aa =  [3, 4, 1, 5, 7, 8, 9]\n",
      "=== end of partation ===\n",
      "3\n",
      "=== Start in partation ===\n",
      "i =  0\n",
      "i =  1\n",
      "i =  2\n",
      "i =  3\n",
      "i =  4\n",
      "i =  5\n",
      "a =  [11, 9, 8, 3, 7, 1, 4]\n",
      "aa =  [1, 9, 8, 3, 7, 11, 4]\n",
      "=== end of partation ===\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def partation(a, p, q):\n",
    "    print \"=== Start in partation ===\" \n",
    "    \n",
    "    if p == q:\n",
    "        return p\n",
    "    elif p > q:\n",
    "        return -1\n",
    "    \n",
    "    #a = copy(s)\n",
    "    pivot = p\n",
    "    i = p\n",
    "    #j = len(a)-1\n",
    "    j = q-p-1\n",
    "    while i<j:\n",
    "        print \"i = \", i\n",
    "        if a[i] > a[pivot]:\n",
    "            a[i], a[j] = a[j], a[i]\n",
    "            j -= 1\n",
    "        i += 1\n",
    "    print \"a = \", a\n",
    "    a[pivot], a[i-1] = a[i-1], a[pivot]\n",
    "    print \"aa = \", a\n",
    "    print \"=== end of partation ===\" \n",
    "    # return the index of pivot value\n",
    "    return i-1\n",
    "    \n",
    "s1 = [5,9,8,3,7,1,4]\n",
    "print partation(s1, 0, 7)\n",
    "\n",
    "s2 = [11,9,8,3,7,1,4]\n",
    "print partation(s2, 0, 7)\n",
    "#print partation(s, 0, 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def quick_select_sort(s, k):\n",
    "    if not 0 <= k < len(s):\n",
    "        return \"Invalid k\"\n",
    "    kk = k\n",
    "    pivot = 0\n",
    "    while 0 <= pivot < len(s):\n",
    "        pivot = partation(s, 0, len(s))\n",
    "        if kk == pivot+1:\n",
    "            print \"kk == pivot+1\"\n",
    "            print \"pivot: \", pivot\n",
    "            print s[pivot]\n",
    "            break\n",
    "        elif kk > pivot+1:\n",
    "            print \"kk > pivot+1\"\n",
    "            p = pivot + 1\n",
    "            q = len(s)\n",
    "            kk -= pivot+1\n",
    "        else:\n",
    "            print \"kk < pivot\"\n",
    "            p = 0\n",
    "            q = pivot -1\n",
    "            \n",
    "    if 0 <= pivot < len(s): \n",
    "        return s[pivot]\n",
    "    else:\n",
    "        return None\n",
    "            \n",
    "print quick_select_sort(s, 4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
